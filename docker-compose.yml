version: "3.7"

networks:
  bridge:
    driver: bridge
  
services:

  nginx-app:
    image: jc21/nginx-proxy-manager:2
    container_name: nginx
    restart: always
    ports:
      # Public HTTP Port:
      - '80:80'
      # Public HTTPS Port:
      - '443:443'
      # Admin Web Port:
      - '81:81'
    environment:
      # Uncomment this if IPv6 is not enabled on your host
      DISABLE_IPV6: 'true'
    volumes:
      # Make sure this config.json file exists as per instructions above:
      - ./nginx/config.json:/app/config/production.json
      - ../docker-data/nginxproxymanager/data:/data
      - ../docker-data/nginxproxymanager/letsencrypt:/etc/letsencrypt

  heimdall-app:
    image: linuxserver/heimdall
    container_name: heimdall
    restart: unless-stopped
    volumes:
      - ../docker-data/heimdall:/config
    ports:
      - 9080:80
      - 9443:443

  portainer:
    image: portainer/portainer
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '../docker-data/portainer/data:/data'
      - '../docker-data/shared:/shared'

  grafana:
    hostname: grafana
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    networks:
      - bridge
    ports:
      - 4000:3000
    volumes: 
      - ../docker-data/grafana:/config
    environment:
      - GF_PATHS_DATA=/config/data
      - GF_PATHS_LOGS=/config/logs
      - GF_PATHS_PLUGINS=/config/plugins
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - influxdb
      #- varken

  influxdb:
    hostname: influxdb
    image: influxdb
    container_name: influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    networks:
      - bridge
    volumes:
      - ../docker-data/influxdb:/var/lib/influxdb

  telegraf:
    hostname: telegraf    
    image: telegraf
    container_name: telegraf
    restart: unless-stopped
    links:
      - influxdb
    networks:
      - bridge
    volumes:
      # Mount for telegraf config
      - ../docker-data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf

  # adminer:
  #   image: adminer
  #   restart: always
  #   networks:
  #     - bridge
  #   ports:
  #     - 8081:8080

  # bazarr:
  #   image: linuxserver/bazarr
  #   container_name: bazarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=american/chicago
  #     - UMASK_SET=022 #optional
  #   volumes:
  #     - ./bazarr-config/:/config
  #     - H:/--- Movies ---:/movies-1
  #     - K:/--- HEVC Movies ---:/movies-hevc
  #     - E:/--- Off Air ---:/tv-offair
  #     - I:/--- On Air ---:/tv-onair
  #     - J:/Kids Movies:/movies-kids
  #     - J:/--- Kids TV Shows ---:/tv-kids
  #     - J:/--- Anime Series ---:/anime
  #   ports:
  #     - 6767:6767
  #   restart: unless-stopped

  # grocy:
  #   image: linuxserver/grocy
  #   container_name: grocy
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=America/Chicago
  #   volumes:
  #     - ./grocy-config:/config
  #   ports:
  #     - 9283:80
  #   restart: unless-stopped

  # wikijs-app:
  #   image: requarks/wiki:2
  #   depends_on:
  #     - wikijs-db
  #   environment:
  #     DB_TYPE: postgres
  #     DB_HOST: wikijs-db
  #     DB_PORT: 5432
  #     DB_USER: wikijs
  #     DB_PASS: wikijsrocks
  #     DB_NAME: wiki
  #   restart: unless-stopped
  #   ports:
  #     - '3000:3000'
  #   networks:
  #     - bridge

  # omnidb-app:
  #   image: taivokasper/omnidb
  #   restart: always
  #   ports:
  #     - '25482:25482'
  #     - '8080:8080'
  #   volumes:
  #     - ./omnidb:/etc/omnidb
  #   networks:
  #     - bridge

  # mayanedms-app:
  #   depends_on:
  #     - mayanedms-db
  #     - redis
  #     # Enable to use RabbitMQ
  #     #- rabbitmq
  #   environment: &mayan_env
  #     # Enable to use RabbitMQ
  #     # MAYAN_CELERY_BROKER_URL: amqp://${MAYAN_RABBITMQ_USER:-mayan}:${MAYAN_RABBITMQ_PASSWORD:-mayanrabbitpass}@rabbitmq:5672/${MAYAN_RABBITMQ_VHOST:-mayan}
  #     # To use RabbitMQ as broker, disable Redis as broker
  #     MAYAN_CELERY_BROKER_URL: redis://:${MAYAN_REDIS_PASSWORD:-mayanredispassword}@redis:6379/0
  #     MAYAN_CELERY_RESULT_BACKEND: redis://:${MAYAN_REDIS_PASSWORD:-mayanredispassword}@redis:6379/1
  #     MAYAN_DATABASES: "{'default':{'ENGINE':'django.db.backends.postgresql','NAME':'${MAYAN_DATABASE_DB:-mayan}','PASSWORD':'${MAYAN_DATABASE_PASSWORD:-mayandbpass}','USER':'${MAYAN_DATABASE_USER:-mayan}','HOST':'mayanedms-db'}}"
  #     MAYAN_DOCKER_WAIT: "mayanedms-db:5432 redis:6379"
  #     # Replace with the line below when using RabbitMQ
  #     # MAYAN_DOCKER_WAIT: "postgresql:5432 redis:6379 rabbitmq:5672"
  #     # To add operating system packages, like additional OCR language,
  #     # packages, put then in the variable below.
  #     # MAYAN_APT_INSTALLS: "tesseract-ocr-deu tesseract-ocr-nld"
  #     # To add Python libraries, like LDAP, put then in the variable below.
  #     # MAYAN_PIP_INSTALLS: "python-ldap"
  #   image: mayanedms/mayanedms:3
  #   networks:
  #     - bridge
  #   ports:
  #     - '8000:8000'
  #   restart: unless-stopped
  #   volumes:
  #     - ./mayan-edms/storage:/var/lib/mayan
  #     - ./mayan-edms/staging:/staging_files
  #     - ./mayan-edms/watch:/watch_folder
  #     # Optional volumes to access external data like staging or watch folders
  #     # - /opt/staging_files:/staging_files
  #     # - /opt/watch_folder:/watch_folder

  # redis:
  #   command:
  #     - redis-server
  #     - --appendonly
  #     - "no"
  #     - --databases
  #     - "2"
  #     - --maxmemory
  #     - "100mb"
  #     - --maxclients
  #     - "500"
  #     - --maxmemory-policy
  #     - "allkeys-lru"
  #     - --save
  #     - ""
  #     - --tcp-backlog
  #     - "256"
  #     - --requirepass
  #     - "${MAYAN_REDIS_PASSWORD:-mayanredispassword}"
  #   image: redis:5.0-alpine
  #   networks:
  #     - bridge
  #   restart: unless-stopped
  #   volumes:
  #     - redis:/data

  # wikijs-db:
  #   image: postgres:11-alpine
  #   environment:
  #     POSTGRES_DB: wiki
  #     POSTGRES_PASSWORD: wikijsrocks
  #     POSTGRES_USER: wikijs
  #   logging:
  #     driver: "none"
  #   restart: unless-stopped
  #   networks:
  #     - bridge
  #   volumes:
  #     - wikijs-data:/var/lib/postgresql/data

  # mayanedms-db:
  #   environment:
  #     POSTGRES_DB: ${MAYAN_DATABASE_DB:-mayan}
  #     POSTGRES_PASSWORD: ${MAYAN_DATABASE_PASSWORD:-mayandbpass}
  #     POSTGRES_USER: ${MAYAN_DATABASE_USER:-mayan}
  #   image: postgres:9.6-alpine
  #   networks:
  #     - bridge
  #   restart: unless-stopped
  #   volumes:
  #     - mayanedms-data:/var/lib/postgresql/data
    
# volumes:
#  wikijs-data:
  #mayanedms-app:
#  mayanedms-data:
  #rabbitmq:
#  redis: